{"version":3,"sources":["createTask.js","totaltask.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTask","textInput","numeroTarea","deletetask","dateCreated","Date","toLocaleDateString","className","onClick","TotalTask","mytasks","App","state","showTextInput","tasks","userInputHandler","e","setState","target","value","validateInput","preventDefault","textInputTrue","showTestInput","id","uuid","task","alert","deleteTaskHandler","index","allTasks","splice","this","map","onSubmit","type","onChange","length","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAyBeA,EAvBI,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WACtCC,GAAc,IAAIC,MAAOC,qBAE/B,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAIA,UAAU,eAAd,mBAAoCL,KACpC,sBAAKK,UAAU,UAAf,UACE,sBAAKA,UAAU,YAAf,UACE,6BAAKN,IACL,6CAAgBG,QAElB,sBAAKG,UAAU,gBAAf,UACE,wBAAQA,UAAU,cAAlB,wBACA,wBAAQA,UAAU,cAAlB,uBACA,wBAAQA,UAAU,aAAaC,QAASL,EAAxC,gCCNKM,G,MARG,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACE,qBAAKH,UAAU,UAAf,SACE,+CAAkBG,SCyFTC,E,4MAvFbC,MAAQ,CACNX,UAAW,GACXY,eAAe,EACfC,MAAO,I,EAGTC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CACZhB,UAAWe,EAAEE,OAAOC,S,EAIxBC,cAAgB,SAACJ,GACfA,EAAEK,iBACF,IAAMC,EAAgB,EAAKV,MAAMC,cACR,KAAzB,EAAKD,MAAMX,UACP,EAAKgB,SAAS,CACZM,eAAgBD,EAChBR,MAAM,GAAD,mBACA,EAAKF,MAAME,OADX,CAEH,CAAEU,GAAIC,MAAQC,KAAM,EAAKd,MAAMX,aAEjCA,UAAW,KAEb0B,MAAM,uB,EAGZC,kBAAoB,SAACC,GACnB,IAAMC,EAAQ,YAAO,EAAKlB,MAAME,OAChCgB,EAASC,OAAOF,EAAO,GACvB,EAAKZ,SAAS,CACZH,MAAOgB,K,yDAKT,IAAMpB,EAAO,YAAOsB,KAAKpB,MAAME,OAC/BkB,KAAKf,SAAS,CACZH,MAAOJ,M,+BAID,IAAD,OACHgB,EAAO,KAkBX,OAjBiC,IAA7BM,KAAKpB,MAAMW,gBACbG,EACE,8BACGM,KAAKpB,MAAME,MAAMmB,KAAI,SAACP,EAAMG,GAC3B,OACE,cAAC,EAAD,CACE5B,UAAWyB,EAAKA,KAChBxB,YAAa2B,EAAQ,EAErB1B,WAAY,kBAAM,EAAKyB,kBAAkBC,KADpCH,EAAKF,UAUpB,sBAAKjB,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,6CACA,sBAAM2B,SAAUF,KAAKZ,cAArB,SACE,uBACEe,KAAK,OACLhB,MAAOa,KAAKpB,MAAMX,UAClBmC,SAAUJ,KAAKjB,qBAGnB,wBAAQR,UAAU,eAAeC,QAASwB,KAAKZ,cAA/C,wBAIF,uBACA,uBACA,uBACA,uBACA,cAAC,EAAD,CAAWV,QAASsB,KAAKpB,MAAME,MAAMuB,SACrC,qBAAK9B,UAAU,gBAAf,SAAgCmB,W,GAlFtBY,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4f39a4b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CreateTask = ({ textInput, numeroTarea, deletetask }) => {\r\n  const dateCreated = new Date().toLocaleDateString()\r\n\r\n  return (\r\n    <div className=\"task\">\r\n      <h1 className=\"text-primary\">Tarea {numeroTarea}</h1>\r\n      <div className=\"wrapper\">\r\n        <div className=\"task-info\">\r\n          <h3>{textInput}</h3>\r\n          <p>Created at: {dateCreated}</p>\r\n        </div>\r\n        <div className=\"container-btn\">\r\n          <button className=\"btn process\">En Proceso</button>\r\n          <button className=\"btn success\">Terminada</button>\r\n          <button className=\"btn delete\" onClick={deletetask}>\r\n            Eliminar\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateTask;\r\n","import React from \"react\";\r\n\r\nconst TotalTask = ({mytasks}) => {\r\n  return (\r\n    <div className=\"myTasks\">\r\n      <h1>Total Tasks: {mytasks}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalTask;\r\n","import React, { Component } from \"react\";\nimport uuid from \"react-uuid\";\nimport CreateTask from \"./createTask\";\nimport \"./App.css\";\nimport TotalTask from \"./totaltask\";\n\nclass App extends Component {\n  state = {\n    textInput: \"\",\n    showTextInput: false,\n    tasks: [],\n  };\n\n  userInputHandler = (e) => {\n    this.setState({\n      textInput: e.target.value,\n    });\n  };\n\n  validateInput = (e) => {\n    e.preventDefault();\n    const textInputTrue = this.state.showTextInput;\n    this.state.textInput !== \"\"\n      ? this.setState({\n          showTestInput: !textInputTrue,\n          tasks: [\n            ...this.state.tasks,\n            { id: uuid(), task: this.state.textInput },\n          ],\n          textInput: \"\",\n        })\n      : alert(\"Please Add a Task!\");\n  };\n\n  deleteTaskHandler = (index) => {\n    const allTasks = [...this.state.tasks];\n    allTasks.splice(index, 1);\n    this.setState({\n      tasks: allTasks,\n    });\n  };\n\n  allTasks() {\n    const mytasks = [...this.state.tasks];\n    this.setState({\n      tasks: mytasks,\n    });\n  }\n\n  render() {\n    let task = null;\n    if (this.state.showTestInput === true) {\n      task = (\n        <div>\n          {this.state.tasks.map((task, index) => {\n            return (\n              <CreateTask\n                textInput={task.task}\n                numeroTarea={index + 1}\n                key={task.id}\n                deletetask={() => this.deleteTaskHandler(index)}\n              />\n            );\n          })}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"mainInput\">\n          <h1>Tareas Yari</h1>\n          <form onSubmit={this.validateInput}>\n            <input\n              type=\"text\"\n              value={this.state.textInput}\n              onChange={this.userInputHandler}\n            />\n          </form>\n          <button className=\"buttonSubmit\" onClick={this.validateInput}>\n            Agregar\n          </button>\n        </div>\n        <br />\n        <br />\n        <br />\n        <br />\n        <TotalTask mytasks={this.state.tasks.length} />\n        <div className=\"taskContainer\">{task}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}